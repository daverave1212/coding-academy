
:root {
    --page-padding-left: 10vw;
    --page-padding-right: 10vw;
    
    --z-lowest: -300;
    --z-lower: -200;
    --z-low: -100;
    --z-normal: 0;
    --z-high: 100;
    --z-higher: 200;
    --z-highest: 300;

    --w-4k: 3839px;
    --w-2k: 2559px;
    --w-desktop: 1920px;
    --w-laptop: 1300px;
    --w-tablet: 1080px;
    --w-phone: 768px;
}
@media (max-width: 1300px) {
    :root {
        --page-padding-left: 6.5vw;
        --page-padding-right: 6.5vw;
    }
    :root {
        --page-padding-left: 5vw;
        --page-padding-right: 5vw;
    }
}







*, body {
    vertical-align: top;
    box-sizing: border-box;
    padding: 0px;
    margin: 0px;

    font-family: BaseFont;
}

body {
    background-color: var(--background-color);
    width: 100%;
    overflow-x: hidden;
}
nav a {
    font-family: RoundedNunito;
    font-weight: 600;
}
p {
    font-family: RoundedNunito;
    font-weight: 400;
}
h1, h2, h3, h4 {
    font-family: HeroMuli;
}
.hero-title {
    font-family: HeroMuli;
    line-height: calc(var(--hero-fs) * 1.25);
}
.hero-subtitle {
    font-family: RoundedNunito;
    font-weight: 600;
    color: rgb(152, 152, 152);
}
input, button, textarea {
    font-family: RoundedNunito;
    font-weight: 400;
}
button {
    border: none;
}










.page {
    width: 100vw;
    max-width: 100%;
    /* min-height: 100vh; */
    padding-left: var(--page-padding-left);
    padding-right: var(--page-padding-right);
    padding-top: 1.25rem;
    padding-bottom: 10vh;
}
.page.center-text {
    text-align: center;
}

.hidden {
    display: none;
    visibility: none;
}
.shadowed {
    box-shadow: rgba(55, 55, 55, 0.2) 0px 2px 8px;
}
.shadowed-bottom {
    box-shadow: 0px 6px 8px -5px rgba(55, 55, 55, 0.2);
}
.rounded {
    border-radius: 0.75rem;
}
.rounded-left {
    border-top-left-radius: 0.75rem;
    border-bottom-left-radius: 0.75rem;
}
.center-content {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}
.center-text {
    text-align: center;
}
.relative, .position-relative {
    position: relative;
}
.absolute, .position-absolute {
    position: absolute;
}
.flex-content {
    display: flex;
    flex-direction: row;
    gap: 1rem;
}
.flex {
    display: flex;
}
.flex-center {
    display: flex;
    justify-content: center;
}
.flex.column {
    flex-direction: column;
}
.flex-content.center {
    justify-content: center;
}
.flex-content.wrap {
    flex-wrap: wrap;
}
.flex-content.right, .flex-content.align-right {
    justify-content: end;
}
.text-align-left {
    width: 100%;
    text-align: left;
}

.icon {
    height: 1rem;
    width: 1rem;
}

.padded {
    padding: 1.5rem;
}
.space-top {
    padding-top: 5rem;
}
.margin-top-half {
    margin-top: 0.5rem;
}
.margin-top-1 {
    margin-top: 1rem;
}
.margin-top-2 {
    margin-top: 2rem;
}
.margin-top-3 {
    margin-top: 3rem;
}
.margin-top-4 {
    margin-top: 4rem;
}
.margin-bottom-half {
    margin-bottom: 0.5rem;
}
.margin-bottom-1 {
    margin-bottom: 1rem;
}
.margin-bottom-2 {
    margin-bottom: 2rem;
}
.margin-bottom-4 {
    margin-bottom: 4rem;
}
.btn {
    border: none;
    color: white;
    border-radius: 0.5rem;

    padding: 0.5rem;
    padding-left: 0.75rem;
    padding-right: 0.75rem;

    text-decoration: none;
    text-align: center;
}
.btn:disabled, .btn[disabled] {
    background-color: gray !important;
}
.btn.red {
    background-color: rgb(250, 52, 52);
}
.btn.blue {
    background-color: rgb(52, 138, 250);
}
.btn.gray {
    background-color: gray;
}
.btn.big {
    padding: 1rem;
    padding-left: 1.5rem;
    padding-right: 1.5rem;
    font-size: 1.5rem;
}
.btn a {
    text-decoration: none;
    color: white;
}
:root {
    --menu-selected-color: rgb(186, 160, 255);
}
.colorful {
    background-color: var(--menu-selected-color) !important;
}

.strikethrough {
    text-decoration: line-through;
}

.portrait-only {
    display: unset;
}
.landscape-only {
    display: unset;
}
@media (min-width: 1080px) {
    .portrait-only {
        display: none;
    }
}
@media (max-width: 1080px) {
    .landscape-only {
        display: none;
    }
}
@media (max-width: 1300px) {
    .wide-only {
        display: none;
    }
}
@media (min-width: 1300px) {
    .narrow-only {
        display: none;
    }
}



.cards {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-gap: 5%;
    grid-row-gap: 5vw;
}
.card {
    width: 100%;
    height: 100%;

    padding: 1rem;

    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    
    gap: 1rem;
    padding-top: 1rem;
    padding-bottom: 1rem;

    background-color: white;
    transition: 0.25s;
}
.card p {
    font-size: 0.8rem;
}

.circle {
    border-radius: 50%;
    width: 2rem;
    aspect-ratio: 1;

}
.floating-object {
    --duration: 7s;
    animation:
        ScaleIn calc(var(--duration) * 0.1) ease-out 1 calc(var(--duration) * 0.1) forwards,
        FloatingObject var(--duration) ease-in-out infinite calc(var(--duration) * 0.25);
    transform: translate(0px) scale(0);
}
@keyframes ScaleIn {
    0% { transform: scale(0); }
    100% { transform: scale(1); }
}
@keyframes FloatingObject {
    0% {
        transform: translateY(0px);
    }
    50% {
        transform: translateY(10px);
    }
    100% {
        transform: translateY(0px);
    }
}

.snappy-object-on-hover:hover {
    --rotate: 0deg;
    
    animation: SnappyObject 0.4s normal 1;
    transition: transform;
    transform: rotate(var(--rotate));
}
.snappy-object {
    --rotate: 0deg;
    
    animation: SnappyObject 0.4s normal 1;
    transition: transform;
    transform: rotate(var(--rotate));
}
@keyframes SnappyObject {
    0% {
        transform: rotate(calc(var(--rotate) -5deg));
    }
    20% {
        transform: rotate(calc(var(--rotate) + 5deg));
    }
    35% {
        transform: rotate(calc(var(--rotate) - 2.5deg));
    }
    50% {
        transform: rotate(calc(var(--rotate) + 2.5deg));
    }
    65% {
        transform: rotate(calc(var(--rotate) - 1deg));
    }
    80% {
        transform: rotate(calc(var(--rotate)));
    }
    100% {
        transform: rotate(calc(var(--rotate)));
    }
}




















.will-animate-transform {
    --rotate: 0deg;
    --scale: 0;
    --x: 0px;
    --y: 0px;
    --perspective: 0px;
    --rotate-3d-x: 0;
    --rotate-3d-y: 0;
    --rotate-3d-z: 0;
    --rotate-3d-rotate: 0deg;
    --to-rotate: 0deg;
    --to-scale: 1;
    --to-x: 0px;
    --to-y: 0px;
    --to-perspective: 0px;
    --to-rotate-3d-x: 0;
    --to-rotate-3d-y: 0;
    --to-rotate-3d-z: 0;
    --to-rotate-3d-rotate: 0deg;
    --animation-duration: 2s;
    transition: 'transform 2s cubic-bezier(0.19, 1, 0.22, 1)';
    transform: translate(var(--x), var(--y)) scale(var(--scale)) rotate(var(--rotate)) perspective(var(--perspective));
    transform-origin: center;
}
.will-animate-transform.started {
    animation: Anim var(--animation-duration) cubic-bezier(0.19, 1, 0.22, 1) forwards;
}
@keyframes Anim {
    0% {
        transform: translate(var(--x), var(--y)) scale(var(--scale)) rotate(var(--rotate)) perspective(var(--perspective));
    }
    100% {
        transform: translate(var(--to-x), var(--to-y)) scale(var(--to-scale)) rotate(var(--to-rotate)) perspective(var(--to-perspective));
    }
}


.triangle {
    --size: 2rem;
    --color: purple;
    border-left: calc(var(--size) / 2) solid transparent;
    border-top: calc(var(--size) / 2) solid transparent;
    border-right: calc(var(--size) / 2) solid transparent;
    border-bottom: calc(var(--size) / 2) solid transparent;
}
.triangle.left {
    border-left: calc(var(--size) / 2) solid var(--color);
}
.triangle.top {
    border-top: calc(var(--size) / 2) solid var(--color);
}
.triangle.right {
    border-right: calc(var(--size) / 2) solid var(--color);
}
.triangle.bottom {
    border-bottom: calc(var(--size) / 2) solid var(--color);
}


